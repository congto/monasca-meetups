https://horizon.hpcloud.com/

openstack_meetup_sunnyvale_aug_2015

# Set up an instance in the public cloud

############### TERMINAL 1 ###############

# Connect to the public cloud instance
ssh-keygen -R 15.126.219.85
ssh -i ~/tmp/default.pem core@15.126.219.85 -L 8183:localhost:8083 -L 8100:localhost:80 -L 8180:localhost:8080 -L 5100:localhost:5000

wget https://horizon.hpcloud.com/project/containers/openstack_meetup_sunnyvale_aug_2015/default.pem

# Doing the download using a container
        # Run a Docker Ubuntu container
        # Install Git so we can clone the Monasca Docker demo
        # Clone repo
        docker run --name docker_meetup_container ubuntu /bin/bash -c "apt-get update;apt-get install git -y;git clone https://github.com/hpcloud-mon/monasca-docker.git"

        # Set a variable name to the docker container
        docker_meetup_container=$(docker ps -a | grep docker_meetup_container | grep -v grep | awk '{print $1}')

        # Copy the monasca-docker.git repo we cloned in the container to the host
        docker cp ${docker_meetup_container}:/monasca-docker . && cd monasca-docker

        # Remove the container since we no longer need it
        docker rm ${docker_meetup_container}

# Doing the download with cUrl
# Download the tarball of monasca-docker since we don't have git on CoreOS
curl -L https://github.com/hpcloud-mon/monasca-docker/tarball/master/monasca-docker.tar.gz | tar zx
wget -qO - https://github.com/hpcloud-mon/monasca-docker/tarball/master/monasca-docker.tar.gz | tar xz

# Run the Monasca Docker demo
cd monasca-docker
docker run -d -p 8083:8083 -p 80:80 -p 8080:8080 -p 5000:5000 --name monasca monasca/demo

############### TERMINAL 2 ###############

# Connect to the public cloud instance
ssh -i ~/tmp/default.pem core@15.126.219.85

# Set a variable name to the docker container
docker_monasca_container=$(docker ps -a | grep monasca | grep -v grep | awk '{print $1}')

# From the Docker target host (15.126.219.85) start a bash shell on the Monasca container
# you need the --login to read your .profile
docker exec -ti ${docker_monasca_container} /bin/bash --login

# Install some useful utilities
apt-get install most tree vim alpine curl openjdk-8-jdk -y

# Set up the credentials so the monasca CLI will work
echo "" /root/.profile
echo "export LANG=en_US.UTF-8" >> /root/.profile
echo "export PYTHONIOENCODING=utf-8" >> /root/.profile
echo "export TERM=vt100" >> /root/.profile
echo "export OS_PROJECT_NAME=mini-mon" >> /root/.profile
echo "export OS_PASSWORD=password" >> /root/.profile
echo "export OS_AUTH_URL=http://localhost:35357/v3/" >> /root/.profile
echo "export OS_USERNAME=mini-mon" >> /root/.profile
echo "# Use the Monasca Python virtualenv" >> /root/.profile
echo "source /opt/monasca/bin/activate" >> /root/.profile

# Generate a US locale
localedef -v -c -i en_US -f UTF-8 en_US.UTF-8

# Bring the credentials in to our current shell
source /root/.profile

# Start the notification engine
/opt/monasca/bin/python /opt/monasca/bin/monasca-notification &

# Start the Monasca Persister
/usr/bin/java -Dfile.encoding=UTF-8 -Xmx1g -cp /opt/monasca/monasca-persister.jar:/opt/monasca/vertica/vertica_jdbc.jar monasca.persister.PersisterApplication server /etc/monasca/persister-config.yml &

# Install the smoke tests
curl -L https://github.com/hpcloud-mon/monasca-ci/tarball/master | tar zx && cp -R ./hpcloud-mon-monasca-ci-*/tests /opt/monasca

# Run the smoke test
/opt/monasca/tests/smoke/smoke.py


################ DEVSTACK ################

# Login to the new instance
ssh -i ~/tmp/default.pem ubuntu@15.126.128.225 -L 8283:localhost:8083 -L 8200:localhost:80 -L 8280:localhost:8080 -L 5200:localhost:5000

# Install Git
sudo apt-get update;sudo apt-get install git python-openstackclient -y

# Clone Devstack
git clone https://git.openstack.org/openstack-dev/devstack && cd devstack

# Setup the IP from the external host
cp samples/local.conf .

# Put in our public IP
sed -i 's/#HOST_IP=w\.x\.y\.z/HOST_IP=10.0.0.47/g' local.conf

# Enable Neutron on Devstack
sed -i '/[[local|localrc]]/a \\n#Enable Neutron services\ndisable_service n-net\nenable_service q-svc\nenable_service q-agt\nenable_service q-dhcp\nenable_service q-l3\nenable_service q-meta' local.conf

# Enable Heat on Devstack
sed -i '/[[local|localrc]]/a \\n#Enable heat services\nenable_service h-eng h-api h-api-cfn h-api-cw' local.conf

# The network overlaps with the public cloud internal network
sed -i 's/10\.0\.0\.0/10.10.10.0/g' stackrc

# Start Devstack
./stack.sh

# Get the envs set
source openrc

# Create a mini-mon project
keystone tenant-create --name=mini-mon

# Create a user
keystone user-create  --name mini-mon --pass password --tenant mini-mon --enabled true

# Upload a Docker image to Glance
glance image-create --name CoreOS --container-format bare --disk-format qcow2 --progress --file ~/images/coreos_production_openstack_image.img

